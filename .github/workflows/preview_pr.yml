name: 3. PR プレビューデプロイ
# Pull Requestが作成・更新されたときにプレビュー環境をデプロイ
on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**.html'
      - '**.css'
      - '**.js'

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    permissions:
      contents: write       # gh-pagesブランチへのプッシュのため
      pull-requests: write  # PRコメント投稿のため

    steps:
      - name: ⬇️ リポジトリをチェックアウト
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: 📦 プレビュー用ディレクトリを準備
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          mkdir -p preview/pr-${PR_NUMBER}

          # HTMLとCSSファイルをプレビューディレクトリにコピー
          find . -maxdepth 1 -type f \( -name "*.html" -o -name "*.css" -o -name "*.js" \) -exec cp {} preview/pr-${PR_NUMBER}/ \;

          echo "✅ PR #${PR_NUMBER} のプレビュー環境を準備しました"
          ls -la preview/pr-${PR_NUMBER}/

      - name: 🚀 GitHub Pagesにデプロイ（gh-pagesブランチ）
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./preview
          destination_dir: preview
          keep_files: true  # 他のPRのプレビューを保持
          commit_message: "Deploy preview for PR #${{ github.event.pull_request.number }}"

      - name: 💬 プレビューURLをPRにコメント
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const repoName = context.repo.repo;
            const owner = context.repo.owner;
            const previewUrl = `https://${owner}.github.io/${repoName}/preview/pr-${prNumber}/index.html`;

            const comment = `## 🎉 プレビュー環境が準備できました！

            **プレビューURL**: [${previewUrl}](${previewUrl})

            このPRの変更内容を上記URLで確認できます。

            ### 📄 ページ一覧
            - [トップページ](${previewUrl})
            - [Aboutページ](https://${owner}.github.io/${repoName}/preview/pr-${prNumber}/about.html)

            ---
            🤖 このコメントは自動生成されました`;

            // 既存のプレビューコメントを検索
            const { data: comments } = await github.rest.issues.listComments({
              owner: owner,
              repo: repoName,
              issue_number: prNumber
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('プレビュー環境が準備できました')
            );

            if (botComment) {
              // 既存のコメントを更新
              await github.rest.issues.updateComment({
                owner: owner,
                repo: repoName,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // 新規コメントを作成
              await github.rest.issues.createComment({
                owner: owner,
                repo: repoName,
                issue_number: prNumber,
                body: comment
              });
            }
